% lecture-heap-n-stack.sty
% Author: Florian Sihler, 22.09.2020
% Basic library to typeset heap and stacks. Needs Tikz
\ProvidesPackage{lecture-heap-n-stack}[2020/09/22 v1.0 heap-n-stack Styling]

\newif\iflhns@debug@
\DeclareOption{debug}{\lhns@debug@true}
\DeclareOption{nodebug}{\lhns@debug@false}
\ProcessOptions*

\iflhns@debug@\let\lhns@debug\typeout\else\let\lhns@debug\@gobble\fi
\RequirePackage{pbox,tikz}
\usetikzlibrary{fit,arrows.meta}

\newcounter{lhns@heap} \newcounter{lhns@stack}
\newif\iflhns@renderheap
\newif\iflhns@renderstack
\newlength\lhns@elemwidth \lhns@elemwidth=3cm
\newlength\lhns@innersep \lhns@innersep=.15em
\newlength\lhns@borderbuff \lhns@borderbuff=1em
\newlength\lhns@captionsep \lhns@captionsep=1em
\newlength\lhns@minborderheight \lhns@minborderheight=4cm

\def\lhns@stackroot{0,0}
\def\lhns@heaproot{\lhns@elemwidth+4*\lhns@borderbuff,0}

\def\lhnselementformat#1{#1}
\def\lhnsielementformat#1{#1}
\def\lhnselementalign{\centering}
\long\def\lhnselementbox#1#2{\pbox{#1}{#2}}
% width calculated in render routine
\def\@lhns@format@elem#1{\lhnselementbox{\lhns@elemtextwidth pt}{\lhnselementalign#1}}

\tikzset{%
    lhns@impstyle/.style={thick},%
    lhns@basestyle/.style={rectangle,outer sep=\z@,inner sep=\lhns@innersep},
    lhns@border/.style={rectangle,rounded corners=2pt,dashed,draw},%
    lhns/.style={{Circle[length=4.5pt]}-Kite}%
}

\def\lhns@heap@element@#1#2#3{%
    \lhns@debug{Reg heap element [\thelhns@heap] text: '#1', extras: '#2', style: '#3'}
    \@namedef{lhn@heap@elem@i@\thelhns@heap}{{#1}{#2}{#3}}%
\stepcounter{lhns@heap}}

\def\lhns@heap@element{\@ifnextchar[\lhns@heap@element@opt\lhns@heap@element@noopt}
\def\lhns@heap@element@opt[#1]#2{\lhns@heap@element@{#2}{#1}{normal}}
\def\lhns@heap@element@noopt#1{\lhns@heap@element@{#1}{}{normal}}

\def\lhns@heap@element@imp{\@ifnextchar[\lhns@heap@element@imp@opt\lhns@heap@element@imp@noopt}
\def\lhns@heap@element@imp@opt[#1]#2{\lhns@heap@element@{#2}{#1}{important}}
\def\lhns@heap@element@imp@noopt#1{\lhns@heap@element@{#1}{}{important}}

\def\lhns@stack@element@#1#2#3{%
    \lhns@debug{Reg stack elem [\thelhns@stack] text: '#1', extras: '#2', style: '#3'}
    \@namedef{lhn@stack@elem@i@\thelhns@stack}{{#1}{#2}{#3}} %
\stepcounter{lhns@stack}}

\def\lhns@stack@element{\@ifnextchar[\lhns@stack@element@opt\lhns@stack@element@noopt}
\def\lhns@stack@element@opt[#1]#2{\lhns@stack@element@{#2}{#1}{normal}}
\def\lhns@stack@element@noopt#1{\lhns@stack@element@{#1}{}{normal}}

\def\lhns@stack@element@imp{\@ifnextchar[\lhns@stack@element@imp@opt\lhns@stack@element@imp@noopt}
\def\lhns@stack@element@imp@opt[#1]#2{\lhns@stack@element@{#2}{#1}{important}}
\def\lhns@stack@element@imp@noopt#1{\lhns@stack@element@{#1}{}{important}}

% heap/stack | number | position
\def\lhns@render@elem@from#1#2#3{%
    \lhns@debug{Render elem [#2] from #1 at #3}
    \protected@edef\@lhns@tmp{\noexpand\lhns@render@elem@\@nameuse{lhn@#1@elem@i@#2}{#3}{#1-#2}}\@lhns@tmp%
}
% #1 text #2 extra format #3 style #4 position #5 name
\def\lhns@render@elem@#1#2#3#4#5{\@nameuse{lhns@render@elem@#3}{#5}{#1}{#2}{#4}}
% name | text | extras | position
\def\lhns@render@elem@normal#1#2#3#4{%
\lhns@debug{ -[#1,n]> '#2'}%
\node[lhns@basestyle,below=\lhns@innersep,#3] (#1) at(#4) {\@lhns@format@elem{\lhnselementformat{#2}}}; % content
\node[lhns@basestyle,draw,minimum width=\lhns@elemwidth,fit={(#1.north) (#1.south)}] (#1-box) {};% box
}
% name | text | extras | position
\def\lhns@render@elem@important#1#2#3#4{%
\lhns@debug{ -[#1,i]> '#2'}%
\node[lhns@basestyle,below=\lhns@innersep,#3] (#1) at(#4) {\@lhns@format@elem{\lhnsielementformat{#2}}}; % content
\node[lhns@basestyle,draw,minimum width=\lhns@elemwidth,fit={(#1.north) (#1.south)},lhns@impstyle] (#1-box) {};% box
}
% note: to allow correct line starts we set the inner nodes extra using their auto width
\def\lhns@render@heap{%
\lhns@renderheaptrue
% render root element:
\ifnum\value{lhns@heap}>0\relax % at least one element => draw
\pgfmathsetmacro\lhns@elemtextwidth{\lhns@elemwidth-\lhns@innersep}%
\lhns@render@elem@from{heap}{0}{\lhns@heaproot};
% number for iteration
\pgfmathsetmacro\lhns@heapemax{int(\value{lhns@heap}-1)}%
\ifnum\lhns@heapemax>0\relax % at least one element left => draw
    \foreach[remember=\i as \li (initially 0)] \i in {1,...,\lhns@heapemax} {
        \lhns@render@elem@from{heap}{\i}{heap-\li-box.south};
    }
\fi
% render boundaries
\node[lhns@border,fit={([yshift=-\lhns@captionsep-\baselineskip]heap-\lhns@heapemax-box.south) (heap-0-box.north) (heap-0-box.east) (heap-0-box.west) ([yshift=-\lhns@minborderheight]\lhns@heaproot)},inner sep=\lhns@borderbuff] (heap-border) {}; % last fit node is min height
% label "heap"
\node[outer sep=\z@,inner sep=\z@,above=\lhns@captionsep,minimum height=\baselineskip] (heap-label) at (heap-border.south) {Heap};
\else% render hull
\node[lhns@border,fit={([yshift=-\lhns@minborderheight]\lhns@heaproot) (\lhns@heaproot)},inner sep=\lhns@borderbuff,minimum width=\lhns@borderbuff+\lhns@elemwidth] (heap-border) {}; % last fit node is min height
% label "heap"
\node[outer sep=\z@,inner sep=\z@,above=\lhns@captionsep,minimum height=\baselineskip] (heap-label) at (heap-border.south) {Heap};
\fi
}

\def\lhns@render@stack{
\lhns@renderstacktrue
% render root element:
\ifnum\c@lhns@stack>0\relax % at least one element => draw
\pgfmathsetmacro\lhns@elemtextwidth{\lhns@elemwidth-\lhns@innersep}%
\lhns@render@elem@from{stack}{0}{\lhns@stackroot};
% number for iteration
\pgfmathsetmacro\lhns@stackemax{int(\c@lhns@stack-1)}%
\ifnum\lhns@stackemax>0\relax % at least one element left => draw
    \foreach[remember=\i as \li (initially 0)] \i in {1,...,\lhns@stackemax} {
        \lhns@render@elem@from{stack}{\i}{stack-\li-box.south};
    }
\fi
% render boundaries
\node[lhns@border,fit={([yshift=-\lhns@captionsep-\baselineskip]stack-\lhns@stackemax-box.south) (stack-0-box.north) (stack-0-box.east) (stack-0-box.west) ([yshift=-\lhns@minborderheight]\lhns@stackroot)},inner sep=\lhns@borderbuff] (stack-border) {}; % last fit node is min height
% label "stack"
\node[outer sep=\z@,inner sep=\z@,above=\lhns@captionsep,minimum height=\baselineskip] (stack-label) at (stack-border.south) {Stack};
\else% render hull
\node[lhns@border,fit={([yshift=-\lhns@minborderheight]\lhns@stackroot) (\lhns@stackroot)},inner sep=\lhns@borderbuff,minimum width=2*\lhns@borderbuff+\lhns@elemwidth] (stack-border) {}; % last fit node is min height
% label "stack"
\node[outer sep=\z@,inner sep=\z@,above=\lhns@captionsep,minimum height=\baselineskip] (stack-label) at (stack-border.south) {Stack};
\fi
}

% #1 => number on top
\newenvironment{heap-n-stack}[1]{\begingroup
\setcounter{lhns@heap}{0}\setcounter{lhns@stack}{0}%
\edef\lhns@thisnumber{#1}%
\lhns@renderstackfalse\lhns@renderheapfalse
\let\stack\lhns@stack@element
\let\istack\lhns@stack@element@imp
\let\heap\lhns@heap@element
\let\iheap\lhns@heap@element@imp
\let\renderheap\lhns@render@heap
\let\renderstack\lhns@render@stack
}{%
\iflhns@renderheap\iflhns@renderstack
    % both present
    \path(stack-border.north west)--(heap-border.north east) node[midway,above=\lhns@innersep] {\lhns@thisnumber};
\else% only heap
\node[above=\lhns@innersep] at (heap-border.north) {\lhns@thisnumber};
\fi\else\iflhns@renderstack% only stack
\node[above=\lhns@innersep] at (stack-border.north) {\lhns@thisnumber};
% other else case dropped as no heap or stack => no number
\fi\fi
\endgroup}
\endinput