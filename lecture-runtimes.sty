%% lecture-runtimes.sty
%% Author: Florian Sihler, 25.10.2020

%% runtime support, ported from lilly. This is an extension of sopra-listings.
\ProvidesPackage{lecture-runtimes}[2020/10/25 v1.0 see code output]

\RequirePackage{ifplatform}

\@ifpackageloaded{sopra-listings}{}{%
  \PackageWarning{lecture-runtimes}{%
    The 'sopra-listings'-package wasn't loaded.%
    Please load it before this package as it is necessary %
    for this package.}%
  \expandafter\endinput
}

\lstdefinestyle{lecture@BashOutput}{%
  basicstyle      = \sol@style@get{basic},%
  frame           = single,%
  breaklines      = true,%
  extendedchars   = true,%
  prebreak        = {\sol@lst@prebreak{}},
  framerule       = \sol@length@lst@famerule,%
  numbers         = none,%
  keepspaces      = false,%
  xleftmargin     = 3pt,%
  xrightmargin    = 3pt,% detached as no numbers
  backgroundcolor = \color{black!0},
  rulecolor       = \color{sol@colors@border},%
  add to literate = {0x}{{\solGet{comments}{0x}}}2 {0b}{{\solGet{comments}{0b}}}2%
}

\def\rbash{\@ifnextchar[{\rbash@opt}{\rbash@opt[\thinspace:]}}
\def\rbash@opt[#1]#2{%
  \cbash{#2}#1\@ifnextchar({\rbash@ccommand}{\rbash@ccommand(#2)}%
}
\def\rbash@ccommand(#1){%
  \lecture@runtimes@getBashFileExecutionOutput{#1}%
}

\gdef\Rbash{\@ifnextchar[{\Rbash@opt}{\Rbash@opt[\thinspace:]}}
\gdef\Rbash@opt[#1]#2#3{%
  \cbash{#2}#1%
  \lecture@runtimes@getBashFileExecutionOutput{#3}%
}

\ifcsname robustify\endcsname
\robustify\rbash \robustify\Rbash\fi

\def\rbashcurrentinject{}
\def\lecture@runtimes@getBashFileExecutionOutput#1{%
\lecture@runtimes@ExecuteBash{\jobname.run.out}{#1}% safest way :D
\protected@edef\@exectmp{%
  \noexpand\lstinputlisting[style=lecture@BashOutput,language=lVoid,\rbashcurrentinject]{\jobname.run.out}%
}\@exectmp
\lecture@runtimes@Execute{ rm \jobname.run.out }%
}

\def\lecture@runtimes@ExecuteBash#1#2{\lecture@runtimes@Execute{ #2 > #1 2> #1}}

\def\lecture@runtimes@Execute#1{\immediate\write18{#1}}
\ifshellescape\else
\def\lecture@runtimes@error{\textbf{Achtung: Shell escape/write-18 ist nicht aktiv! Kann nichts anzeigen!}}%
% Definiere die Befehle mit einer entsprechenden Fehlermeldung
% overwrite 'lecture@runtimes@getBashFileExecutionOutput':
\def\lecture@runtimes@getBashFileExecutionOutput#1{\lecture@runtimes@error}%
% overwrite other so that usercomamnd works too
\def\lecture@runtimes@Execute#1{\lecture@runtimes@error}%
\fi

\let\rExecute\lecture@runtimes@Execute
\endinput