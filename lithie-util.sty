%% lithie-util.sty
%%
%% --------------------------------------------------------------------------
%%
%% Autor: Florian Sihler, 20.09.2020
%%
%% Collection of all the other packages i have, which are requsted as needed.
%%
\ProvidesPackage{lithie-util}[2020/09/20 v1.0 the lithie util collector]

\RequirePackage{kvoptions,etoolbox,lithie-profiles}

\SetupKeyvalOptions{family=LITU,prefix=LITU@}

% general
\def\@litu@none{LITHIE@NOOPTS@GIVEN}

% hooks
\def\@litu@hook@PackageRequire{} \def\@litu@hook@GroupRequire{} \def\@litu@hook@RequirePackages{}
\def\@litu@all@groups{}

% add to list
\let\@litu@atl\listadd

% #1 group id
\def\lu@DefineGroup#1{%
    \@namedef{@litu@@group@#1}{}%
    \@litu@atl\@litu@all@groups{#1}%
    \DeclareVoidOption{#1}{\listadd\@litu@hook@GroupRequire{#1}}%
}

\def\lu@AddToGroup#1#2{\expandafter\def\expandafter\@litu@tmp@listnam\expandafter{\csname @litu@@group@#1\endcsname}%
\edef\@litu@tmp{\noexpand\@litu@atl\expandonce{\@litu@tmp@listnam}{#2}}\@litu@tmp}

\def\lu@LoadGroup#1{\protected@edef\@litu@tmp@groupload{\noexpand\forlistloop{\noexpand\lu@LoadModule}{\@nameuse{@litu@@group@#1}}}%
\@litu@tmp@groupload}

\def\@@lu@atgs#1#2{\lu@AddToGroup{#2}{#1}}

\def\lu@AddToGroups#1#2{\edef\@litu@tmp{#2}%
    \protected@edef\@litu@tmp@curcsv{\noexpand\forcsvlist{\noexpand\@@lu@atgs{\@litu@tmp}}{#1}}\@litu@tmp@curcsv%
}

\def\lu@Get#1#2{\@nameuse{@lu@module@map@#2@#1}}

% TODO: maybe avoid duplicate loading; maybe group commands to avoid pollution?
\def\@litu@resolve@module@args#1#2#3{%
\edef\@litu@name{\lu@Get{#1}{name}}% todo only expand once
\edef\@litu@cur{\@nameuse{LITU@\@litu@name}}%
\ifx\@litu@cur\@litu@none#2\else#3\fi}

\def\@@litu@util{:}
\def\@@litu@load@consume@arg@ifcmd#1#2->#3#4{%
    \ifstrempty{#1#2}{}{\def\@@litu@first@chk{#1}%
        \ifx\@@litu@first@chk\@@litu@util% is command
            #3{#2}\else#4{#2}\fi%
}}

\def\@litu@cmd@defaults{defaults}
\def\@@litu@passopt@fp#1#2{\PassOptionsToPackage{#1}{#2}}
% #1 module id, #2 command
\def\@litu@execute@command#1#2{%
\def\@@litu@cmd@chk{#2}%
\ifx\@@litu@cmd@chk\@litu@cmd@defaults%
    \edef\@litu@tmp{\noexpand\@@litu@passopt@fp{\lu@Get{#1}{defaults}}{\lu@Get{#1}{package}}}%
    \@litu@tmp\fi%
}

\def\@litu@gobble#1{}
% allow ':defaults' to be used for defaults
\def\@@litu@load@consume@arg#1#2#3{%
\@@litu@load@consume@arg@ifcmd#3->{%
\@litu@execute@command{#2}% is command
}{ % is no command
\PassOptionsToPackage{#3}{#1}\@litu@gobble%
}}

\def\@litu@load@curargs#1{%
\edef\@litu@tmp{\noexpand\forcsvlist{\noexpand\@@litu@load@consume@arg{%
        \lu@Get{#1}{package}}{#1}}{\@litu@cur}}%
\@litu@tmp}

\def\@lu@RequirePackage#1{%
% allow others PassOptionsToPackage to be called by other hooks:
\appto\@litu@hook@RequirePackages{\typeout{Loadlib \lu@Get{#1}{package} for '#1'}%
\RequirePackage{\lu@Get{#1}{package}}}}

\def\lu@LoadModule#1{%
\@litu@resolve@module@args{#1}{}{%
\@litu@load@curargs{#1}}\@lu@RequirePackage{#1}% outside, execute always
}

\def\lu@LoadModuleIfGiven#1{%
\@litu@resolve@module@args{#1}{}{%
\@litu@load@curargs{#1}\@lu@RequirePackage{#1}% inside, execute only if
}}

% #1 id, #2 module, #3 package-name, #4 defaults, #5 groups (all is forced)
\def\lu@DefineModule#1#2#3#4#5{%
  \expandafter\def\csname @lu@module@map@name@#1\endcsname{#2}%
  \expandafter\def\csname @lu@module@map@package@#1\endcsname{#3}%
  \expandafter\def\csname @lu@module@map@defaults@#1\endcsname{#4}%
  \expandafter\def\csname @lu@module@map@groups@#1\endcsname{all,#5}%
  \protected@edef\@litu@tmp{\noexpand\DeclareStringOption[\@litu@none]{\lu@Get{#1}{name}}[\lu@Get{#1}{defaults}]}\@litu@tmp%
  \appto\@litu@hook@PackageRequire{\lu@LoadModuleIfGiven{#1}}%
  \lu@AddToGroups{\lu@Get{#1}{groups}}{#1}%
}

% define the groups
\forcsvlist{\lu@DefineGroup}{all,util,color,sopra,lecture,lecture-base,listings,boxes,personal,beamer-extra,graphics}

% TODO: configurations or profiles which will setup some general options like add them to packages
\lu@DefineModule{cps}{color-palettes}{color-palettes}{}{color,util,boxes}
\lu@DefineModule{tps}{tikz-palettes}{tikz-palettes}{}{color,util}

\lu@DefineModule{lsc}{lecture-shortcuts}{lecture-shortcuts}{}{util,lecture,lecture-base}
\lu@DefineModule{lgs}{lecture-glossary}{lecture-glossary}{enumitem}{lecture,lecture-base}
\lu@DefineModule{lbg}{lecture-bibliography}{lecture-bibliography}{}{lecture,lecture-base}
\lu@DefineModule{lfr}{lecture-format}{lecture-format}{}{lecture,util,lecture-base}
\lu@DefineModule{lli}{lecture-links}{lecture-links}{}{lecture,lecture-base}
\lu@DefineModule{lcp}{lecture-coverpage}{lecture-coverpage}{}{lecture,lecture-base}
\lu@DefineModule{lre}{lecture-registers}{lecture-registers}{}{lecture,util,lecture-base}
\lu@DefineModule{lar}{lecture-algorithms}{lecture-algorithms}{}{lecture,util}
\lu@DefineModule{lre}{lecture-runtimes}{lecture-runtimes}{}{lecture}
\lu@DefineModule{lca}{lecture-cancel}{lecture-cancel}{}{lecture,util,lecture-base}
\lu@DefineModule{lhs}{lecture-heap-n-stack}{lecture-heap-n-stack}{}{lecture,util}

\lu@DefineModule{lbx}{lithie-boxes}{lithie-boxes}{autoenv}{lecture,util,boxes}
\lu@DefineModule{lts}{lithie-task-boxes}{lithie-task-boxes}{}{lecture,util,boxes}

\lu@DefineModule{blp}{beamer-latex-preview}{beamer-latex-preview}{}{beamer-extra}
\lu@DefineModule{bls}{beamer-latex-shortcuts}{beamer-latex-shortcuts}{}{beamer-extra}

\lu@DefineModule{lib}{lithie-birb}{lithie-birb}{}{util}

\lu@DefineModule{sot}{sopra-tables}{sopra-tables}{}{sopra}
\lu@DefineModule{sor}{sopra-requirements}{sopra-requirements}{}{sopra}
\lu@DefineModule{som}{sopra-models}{sopra-models}{}{sopra,graphics}
\lu@DefineModule{sol}{sopra-listings}{sopra-listings}{noloadlangs}{sopra}
\lu@DefineModule{sod}{sopra-documentation}{sopra-documentation}{}{sopra}
\lu@DefineModule{soc}{sopra-changelog}{sopra-changelog}{}{sopra}
\lu@DefineModule{soa}{sopra-attachments}{sopra-attachments}{}{sopra}

\lu@DefineModule{ltd}{lecture-t-diagrams}{lecture-t-diagrams}{}{lecture,graphics}

\lu@DefineModule{emps}{eagle-maps}{eagle-maps}{}{graphics}

% personal
\lu@DefineModule{lper}{lecture-personal}{lecture-personal}{}{personal}

% TODO: alias functionality?
% TODO: encoding
% TODO: siunitx
% TODO: index

\ProcessKeyvalOptions*

% Load individuals first to allow options
\@litu@hook@PackageRequire%
% Now load the groups.
\forlistloop{\lu@LoadGroup}{\@litu@hook@GroupRequire}%
% Require the packages
\@litu@hook@RequirePackages\relax

\endinput